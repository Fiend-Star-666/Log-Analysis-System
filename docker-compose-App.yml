version: '3.8'

services:

  zookeeper:
    restart: on-failure
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 20s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M

  elasticsearch:
    restart: on-failure
    image: elasticsearch:8.11.1
    environment:
      - "discovery.type=single-node"
      - "http.port=9205"
      - "xpack.security.enabled=false"  # Disable xpack security
      - "xpack.security.http.ssl.enabled=false"  # Disable HTTPS
    ports:
      - "9205:9205"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9205/_cluster/health || exit 1" ]
      interval: 15s
      timeout: 15s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  kafka:
    restart: on-failure
    image: 'bitnami/kafka:latest'
    ports:
      - '9091:9091'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9091
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - custom_network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9091 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    restart: on-failure
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M

  log-ingestor:
    restart: on-failure
    build:
      context: ./Backend/log-ingestor
    ports:
      - "3000:3000"
    environment:
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
    volumes:
      - ./Backend/log-ingestor:/usr/src/myapp
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1G
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy

  query-interface:
    build:
      context: ./Backend/query-interface
    ports:
      - "4000:4000"
    restart: on-failure
    volumes:
      - ./Backend/query-interface:/usr/src/myapp
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    restart: on-failure
    build: ./Frontend/my-app
    ports:
      - "5001:5001"
    depends_on:
      - log-ingestor
      - query-interface
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  elasticsearch-data:

networks:
  custom_network:
    external: true