version: '3.8'

services:

  zookeeper:
    restart: on-failure
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 20s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M

  scylla-node1:
    restart: on-failure
    image: scylladb/scylla:5.2.10
    container_name: scylla-node1
    privileged: true
    ports:
      - "9042:9042"
    networks:
      - custom_network
    volumes:
      - ./init_scylla.sh:/init_scylla.sh
      - ./scylla/scylla.yaml:/conf/scylla.yaml
      - ./scylla/cassandra-rackdc.properties.dc1:/conf/cassandra-rackdc.properties
      - ./scylla/logTestData/cql_log_data.cql:/cql_log_data.cql
      - scylla-data1:/var/lib/scylla
      - scylla-commitlog1:/var/lib/scylla/commitlog
    entrypoint: [ "/bin/bash", "/init_scylla.sh" ]
    healthcheck:
      test: [ "CMD-SHELL", "/bin/sh -c 'if [ $(nodetool status | grep -c \"^UN\") -eq 1 ]; then exit 0; else exit 1; fi'" ]
      interval: 30s
      timeout: 60s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    depends_on:
      kafka:
        condition: service_healthy

  scylla-node2:
    restart: on-failure
    image: scylladb/scylla:5.2.10
    container_name: scylla-node2
    networks:
      - custom_network
    command: --seeds=scylla-node1 --smp 2 --overprovisioned 1
    volumes:
      - scylla-data2:/var/lib/scylla
      - scylla-commitlog2:/var/lib/scylla/commitlog
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status || exit 1" ]
      interval: 30s
      timeout: 60s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    depends_on:
      scylla-node1:
        condition: service_healthy

  scylla-node3:
    restart: on-failure
    image: scylladb/scylla:5.2.10
    container_name: scylla-node3
    networks:
      - custom_network
    command: --seeds=scylla-node1 --smp 2 --overprovisioned 1
    volumes:
      - scylla-data3:/var/lib/scylla
      - scylla-commitlog3:/var/lib/scylla/commitlog
    healthcheck:
      test: [ "CMD-SHELL", "/bin/sh -c 'if [ $(nodetool status | grep -c \"^UN\") -eq 3 ]; then exit 0; else exit 1; fi'" ]
      interval: 30s
      timeout: 60s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    depends_on:
      scylla-node1:
        condition: service_healthy

  load_balancer:
    image: haproxy:latest
    container_name: scylla_lb
    ports:
      - "9042:9042"
    networks:
      - custom_network
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    healthcheck:
      test: [ "CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      scylla-node1:
        condition: service_healthy
      scylla-node2:
        condition: service_healthy
      scylla-node3:
        condition: service_healthy

  postgres:
    restart: on-failure
    image: postgres
    command: [ "postgres", "-c", "port=5431" ]
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: metadataDB
    ports:
      - '5431:5431'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U myuser -d metadataDB -p 5431" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  elasticsearch:
    restart: on-failure
    image: elasticsearch:8.11.1
    environment:
      - "discovery.type=single-node"
      - "http.port=9205"
      - "xpack.security.enabled=false"  # Disable xpack security
      - "xpack.security.http.ssl.enabled=false"  # Disable HTTPS
    ports:
      - "9205:9205"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9205/_cluster/health || exit 1" ]
      interval: 15s
      timeout: 15s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G


  kafka:
    restart: on-failure
    image: 'bitnami/kafka:latest'
    ports:
      - '9091:9091'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9091
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - custom_network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9091 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    restart: on-failure
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M

  log-ingestor:
    restart: on-failure
    build:
      context: ./Backend/log-ingestor
    ports:
      - "3000:3000"
    environment:
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
    volumes:
      - ./Backend/log-ingestor:/usr/src/myapp
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
#      load_balancer:
#        condition: service_healthy
      scylla-node1:
        condition: service_healthy

  query-interface:
    build:
      context: ./Backend/query-interface
    ports:
      - "4000:4000"
    restart: on-failure
    volumes:
      - ./Backend/query-interface:/usr/src/myapp
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
      scylla-node1:
        condition: service_healthy
      scylla-node2:
        condition: service_healthy
      scylla-node3:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      load_balancer:
        condition: service_healthy

  frontend:
    restart: on-failure
    build: ./Frontend/my-app
    ports:
      - "5001:5001"
    depends_on:
      - log-ingestor
      - query-interface
    networks:
      - custom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  scylla-data1:
  scylla-data2:
  scylla-data3:
  scylla-commitlog1:
  scylla-commitlog2:
  scylla-commitlog3:
  postgres-data:
  elasticsearch-data:

networks:
  custom_network:
    driver: bridge